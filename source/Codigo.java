/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ep2ocd;

import static java.lang.System.out;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author carvalho
 */
public class Codigo {

    public static ArrayList<String> uc = new ArrayList<>();

    public static HashMap<Integer, String> pin = new HashMap<>();
    public static HashMap<Integer, String> pout = new HashMap<>();
    public static boolean usoup1 = false;
    public static boolean fwok = false;

    public static String translate(String linha) {

        int[][] matriz1 = {
            // matriz das seguintes operacoes
            // OBS: foi necessario trocar a ordem da matriz para facilitar a implementacao
            //	ADD             SUB	CMP	MOV
            /*AX, 5*/           {1001,      1100111,     100011011,	101101000},
            /*AX, BX*/          {1101,      1101011,     100011110,	101101010},
            /*AX, [MEM]*/	{10001,     1101111,     100100001,	101101100},
            /*AX, [BX]*/	{10111,     1110101,     100100110,	101110001},
            /*[AX], 5*/         {1000010,   10100100,    101001010,	110001010},
            /*[AX], BX*/	{1001001,   10101100,    101010000,	110001110},
            /*[AX], [MEM]*/	{1010000,   10110100,    101010110,	110010010},
            /*[AX], [BX]*/	{1011011,   10111111,    101011111,	110011000},
            /*[MEM], 5*/	{11110,     1111100,     100101100,	101110110},
            /*[MEM], BX*/	{100101,    10000100,    100110010,	101111010},
            /*[MEM], [MEM]*/	{101100,    10001100,    100111000,	101111110},
            /*[MEM], [BX]*/	{110111,    10011000,    101000001,	110000100},
            
        };
        int[][] matriz2 = {
            //          MUL             DIV             INC             DEC
            /*BX*/{11001111, 11100100, 11111001, 100001010},
            /*[AX]*/ {11011001, 11110001, 100000011, 100010100},
            /*[MEM]*/ {11010011, 11101001, 11111100, 100001101},
            /*5*/ {11001011, 11011111, -1, -1}
        };

        int[] matriz3
                = //JMP       JZ          JNZ         JL          JG          JLE         JGE
                {110011110, 110100000, 110100100, 110101000, 110101100, 110110000, 110110100};

        String[] allcods = {
            "ADD", "SUB", "CMP", "MOV",
            "MUL", "DIV", "INC", "DEC",
            "JMP", "JZ", "JNZ", "JL", "JG", "JLE", "JGE"
        };

        String[] alloperadores = {
            "A", "B", "C", "D",
            "[A]", "[B]", "[C]", "[D]",};

        ArrayList<String> codigo = new ArrayList<String>();
        String fim = "END";
        String temp;

        out.println("O código:");
        String[] s = linha.split(" ");

            // AQUI COMECA
        int i = 0; // opcode
        int j = 0; // tipo do p1
        int k = 0; // tipo do p2
        int operando1 = 0; // valor do p1 se for do tipo AX ou [AX]
        int operando2 = 0; // valor do p2 se for do tipo AX ou [AX]
        String ophexa1 = ""; // valor do p1 se for do tipo 5 ou [MEM]
        String ophexa2 = ""; // valor do p1 se for do tipo 5 ou [MEM]

        // 1 - encontra qual operacao esta sendo realizada
        while (i < 15) {
            if (0 == s[0].compareTo(allcods[i])) {
                break;
            }
            i++;
        }
            // fim 1

            // 2 - traduz o primeiro operando
        //tratamento da virgula
        temp = s[1];
        temp = temp.replace(",", "");
        s[1] = temp;
        while (j < 8) {
            if (0 == s[1].compareTo(alloperadores[j])) {
                break;
            }
            j++;
        }
        if (j < 4) {
            // A, B, C ou D
            operando1 = j + 9;
        } else if (j < 8) {
            // [A], [B], [C] ou [D]
            operando1 = j % 4 + 9;
        } else {
            temp = s[1];
            if (temp.indexOf("[") >= 0) {
                // [MEM]
                temp = temp.replace("[", "");
                temp = temp.replace("]", "");
                j = 9; // usado em TRES pontos posteriormente
            }
            // constante
            ophexa1 = temp;
            operando1 = -1; // usado posteriormente
        }
            // fim 2

        // 3 - se houver, traduz segundo operando
        if (s.length == 3) {
            while (k < 8) {
                if (0 == s[2].compareTo(alloperadores[k])) {
                    break;
                }
                k++;
            }
            if (k < 4) {
                // A, B, C ou D
                operando2 = k + 9;
            } else if (k < 8) {
                // [A], [B], [C] ou [D]
                operando2 = k % 4 + 9;
            } else {
                temp = s[2];
                if (temp.indexOf("[") >= 0) {
                    // [MEM]
                    temp = temp.replace("[", "");
                    temp = temp.replace("]", "");
                    k = 9;
                }
                // constante
                ophexa2 = temp;
                operando2 = -1; // usado posteriormente
            }
        }
            // fim 3

        // por fim, a saida do codigo
        String saida;
        if (i < 4) {
            // SAIDA PARA ADD, SUB, CMP e MOV
            if (k < 4) {
                k = 1; // operando2 eh do tipo AX
            } else if (k < 8) {
                k = 3; // operando2 eh do tipo [BX]
            } else if (k == 9) {
                k = 2; // operando2 eh do tipo [MEM]
            } else {
                k = 0; // operando2 eh do tipo 5
            }
                // OBS1: quando operando(1 ou 2) = -1 significa que ele eh [MEM] ou 5 e deve ser hexadecimal a saida
            // OBS2: sempre que for do tipo [BX], a saida tera os colchetes

            if (operando1 == -1 && operando2 == -1) {
                    // saidas: [mem][mem] - [mem]5
                // implicitamente, aqui o j eh 9, e precisa ser
                saida = matriz1[j + k - 1][i] + " " + ophexa1 + " " + ophexa2;
            } else if (operando1 == -1 && operando2 != -1) {
                    // saidas: [MEM]AX - [MEM][AX]
                // implicitamente, aqui o j eh 9, e precisa ser
                saida = matriz1[j + k - 1][i] + " " + ophexa1 + " [" + operando2 + "]";

            } else if (operando1 != -1 && operando2 == -1) {
                // saidas: AX[MEM] - AX5 - [AX][MEM] - [AX]5
                if (j > 3) {
                    saida = matriz1[4 + k][i] + " [" + operando1 + "] " + ophexa2;
                } else {
                    saida = matriz1[k][i] + " [" + operando1 + "] " + ophexa2;
                }
            } else {
                // saidas: AXBX - AX[BX] - [AX]BX - [AX][BX]
                if (j > 3) {
                    saida = matriz1[4 + k][i] + " [" + operando1 + "] [" + operando2 + "]";
                } else {
                    saida = matriz1[k][i] + " [" + operando1 + "] [" + operando2 + "]";
                }
            }

        } else if (i < 8) {
            // SAIDA PARA MUL, DIV, INC e DEC
            if (j < 4) {
                // operando1 eh do tipo BX
                saida = matriz2[0][i % 4] + " [" + operando1 + "]";
                //j = 0;
            } else if (j < 8) {
                // operando1 eh do tipo [BX]
                saida = matriz2[1][i % 4] + " [" + operando1 + "]";
                //j = 1;
            } else if (j == 9) {
                // operando1 eh do tipo [MEM]
                saida = matriz2[2][i % 4] + " " + ophexa1;
                //j = 2;
            } else {
                // operando1 eh do tipo 5
                saida = matriz2[3][i % 4] + " " + ophexa1;
                //j = 3;
            }

        } else {
            // SAIDA PARA JUMPS
            saida = matriz3[i - 8] + " " + ophexa1;
        }

        out.println(saida);
        return saida;
    }
    
    public static Portas parseCodigo(String linha, String zero, String sinal, String ir) {
        int in = 0;
        int out = 0;
        Portas pt = new Portas();
        String ops[] = ir.split(" ");

        String comando[] = linha.split(" ");

        //codigo abrir e fechar porta
        for (int i = 0; i < comando[0].length(); i++) {
            if (comando[0].charAt(i) == '1') {//porta aberta
                String porta;
                if (pin.containsKey(i)) {
                    in++;
                    porta = pin.get(i);
                    if (i < 21) {
                        pt.setpentrada(porta);
                    } else {
                        pt.setpentradaext(porta);
                    }
                } else if (pout.containsKey(i)) {
                    out++;
                    porta = pout.get(i);
                    if (i < 21) {
                        pt.setpsaida(porta);
                    } else {
                        pt.setpsaidaext(porta);
                    }
                }
            }
        }

        int cmp = in - out;
        //abre a porta do registrador, se necessario
        //int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length()-2));
        //int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length()-2));
        if (cmp < 0) {//entrada
            if (ops[1].charAt(0) == '[') { //p1 é registrador
                if (ops.length > 2 && ops[2].charAt(0) == '[') { //p2 tbm é registrador
                    //caso com dois registradores, qual escolher?
                    if (usoup1) {//ja usou p1, ta na vez do p2
                        int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length() - 1)) - 4;
                        String porta = pin.get(p2);
                        pt.setpentrada(porta);
                        usoup1 = false;
                    } else {//nao usou p1, vez dele
                        int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length() - 1)) - 4;
                        String porta = pin.get(p1);
                        pt.setpentrada(porta);
                        usoup1 = true;
                    }
                } else { //p2 nao é registrador
                    //só p1 é registrador, entrada
                    int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length() - 1)) - 4;
                    String porta = pin.get(p1);
                    pt.setpentrada(porta);
                }
            } else { //p1 nao é registrador
                if (ops.length > 2 && ops[2].charAt(0) == '[') { //p2 é registrador
                    //aó p2 é registrador, entrada
                    int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length() - 1)) - 4;
                    String porta = pin.get(p2);
                    pt.setpentrada(porta);
                } else {//p2 nao é registrador
                    System.out.println("ISSO NUNCA DEVERIA OCORRER!!!!!!!!!1");
                }
            }
        } else if (cmp > 0) {//saida
            if (ops[1].charAt(0) == '[') { //p1 é registrador
                if (ops.length > 2 && ops[2].charAt(0) == '[') { //p2 tbm é registrador
                    //caso com dois registradores, qual escolher?
                    if (usoup1) {//ja usou p1, ta na vez do p2
                        int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length() - 1));
                        String porta = pout.get(p2);
                        pt.setpsaida(porta);
                        usoup1 = false;
                    } else {//nao usou p1, vez dele
                        int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length() - 1));
                        String porta = pout.get(p1);
                        pt.setpsaida(porta);
                        usoup1 = true;
                    }
                } else { //p2 nao é registrador
                    //só p1 é registrador, saida
                    int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length() - 1));
                    String porta = pout.get(p1);
                    pt.setpsaida(porta);
                }
            } else { //p1 nao é registrador
                if (ops.length > 2 && ops[2].charAt(0) == '[') { //p2 é registrador
                    //aó p2 é registrador, saida
                    int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length() - 1));
                    String porta = pout.get(p2);
                    pt.setpsaida(porta);
                } else {//p2 nao é registrador
                    System.out.println("ISSO NUNCA DEVERIA OCORRER!!!!!!!!!1");
                }
            }
        } else {
            /*if ("101101010".equals(ops[0]) && !"<OPCODE>".equals(comando[5])) { //caso especial, p1 é entrada e p2 é saida
                int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length() - 1));
                String porta2 = pout.get(p2);
                pt.setpsaida(porta2);
                
                int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length() - 1)) - 4;
                String porta1 = pin.get(p1);
                pt.setpentrada(porta1);

            }*/
            //caso especial, p1 é entrada e p2 é saida
            if("101101010".equals(ops[0]) && pt.pentrada == "-1" && pt.psaida == "-1" && !"<OPCODE>".equals(comando[5])){
                int p2 = Integer.parseInt(ops[2].substring(1, ops[2].length() - 1));
                String porta2 = pout.get(p2);
                pt.setpsaida(porta2);
                
                int p1 = Integer.parseInt(ops[1].substring(1, ops[1].length() - 1)) - 4;
                String porta1 = pin.get(p1);
                pt.setpentrada(porta1);                
                
            }
        }

        //codigo da ula
        switch (comando[1]) {
            case ("000"):
                pt.setula("+");
                break;
            case ("001"):
                pt.setula("-");
                break;
            case ("010"):
                pt.setula("/");
                break;
            case ("011"):
                pt.setula("*");
                break;
            case ("100"):
                pt.setula("inc");
                break;
            case ("101"):
                pt.setula("dec");
                break;
            case ("111"):
                pt.setula("mod");
                break;
            default:
                pt.setula("nada");
        }

        //adress valid e r/w
        if ("1".equals(comando[2])) {
            pt.setadress(true, comando[3]);
        } else {
            pt.setadress(false, comando[3]);
        }

        //codigo do pulo
        switch (comando[4]) {
            case ("000"):
                pt.setpulo(true, comando[5]);
                break;
            case ("001"):
                if ("1".equals(zero)) {
                    pt.setpulo(true, comando[5]);
                } else {
                    pt.setpulo(false, comando[5]);
                }
                break;
            case ("010"):
                if ("1".equals(sinal)) {
                    pt.setpulo(true, comando[5]);
                } else {
                    pt.setpulo(false, comando[5]);
                }
                break;
            case ("011"):
                if ("1".equals(zero) || "1".equals(sinal)) {
                    pt.setpulo(true, comando[5]);
                } else {
                    pt.setpulo(false, comando[5]);
                }
                break;
            case ("111"):
                pt.setpulo(false, "-1");
                break;
            default:
                pt.setpulo(false, comando[5]);
        }

        return pt;
    }

    public static void firmware() {
        if (!fwok) {
            uc.add(0, "firmware começa na linha 1");
            uc.add(1, "//Ciclo de Busca:    ");
            uc.add(2, "01100000000000000000000000 110 0 0 100 000000000");
            uc.add(3, "01000000000000000001010010 100 1 0 111 000000000");
            uc.add(4, "10000000000000000000100101 110 0 0 100 000000000");
            uc.add(5, "00001000000001000000000000 110 0 0 000 000000111");
            uc.add(6, "//Ciclo de Execução: ");
            uc.add(7, "00000000000000000000000000 110 0 0 000 <OPCODE>");
            uc.add(8, "//ADD AX, 5          ");
            uc.add(9, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(10, "00000000000000010001000000 000 0 0 100 000000000");
            uc.add(11, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(12, "//ADD AX, BX         ");
            uc.add(13, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(14, "00000000000000000001000000 000 0 0 100 000000000");
            uc.add(15, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(16, "//ADD AX, [mem.]     ");
            uc.add(17, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(18, "00000000000000000010010010 110 1 0 100 000000000");
            uc.add(19, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(20, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(21, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(22, "//ADD AX, [BX]       ");
            uc.add(23, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(24, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(25, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(26, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(27, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(28, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(29, "//ADD [MEM.], 5      ");
            uc.add(30, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(31, "00000000000000010010010010 110 1 0 100 000000000");
            uc.add(32, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(33, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(34, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(35, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(36, "//ADD [mem.], BX     ");
            uc.add(37, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(38, "00000000000000000010010010 110 1 0 100 000000000");
            uc.add(39, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(40, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(41, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(42, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(43, "//ADD [mem.], [mem.] ");
            uc.add(44, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(45, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(46, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(47, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(48, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(49, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(50, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(51, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(52, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(53, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(54, "//ADD [mem.], [BX]   ");
            uc.add(55, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(56, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(57, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(58, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(59, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(60, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(61, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(62, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(63, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(64, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(65, "//ADD [AX], 5        ");
            uc.add(66, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(67, "00000000000000010010010010 110 1 0 100 000000000");
            uc.add(68, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(69, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(70, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(71, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(72, "//ADD [AX], BX       ");
            uc.add(73, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(74, "00000000000000000010010010 110 1 0 100 000000000");
            uc.add(75, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(76, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(77, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(78, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(79, "//ADD [AX], [mem.]   ");
            uc.add(80, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(81, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(82, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(83, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(84, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(85, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(86, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(87, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(88, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(89, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(90, "//ADD [AX], [BX]     ");
            uc.add(91, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(92, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(93, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(94, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(95, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(96, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(97, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(98, "00001000000000000001000000 000 0 0 100 000000000");
            uc.add(99, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(100, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(101, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(102, "//SUB AX, 5          ");
            uc.add(103, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(104, "00000000000000010001000000 001 0 0 100 000000000");
            uc.add(105, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(106, "//SUB AX, BX         ");
            uc.add(107, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(108, "00000000000000000001000000 001 0 0 100 000000000");
            uc.add(109, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(110, "//SUB AX, [mem.]     ");
            uc.add(111, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(112, "00000000000000000010010010 110 1 0 100 000000000");
            uc.add(113, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(114, "00001000000000000001000000 001 0 0 100 000000000");
            uc.add(115, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(116, "//SUB AX, [BX]       ");
            uc.add(117, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(118, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(119, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(120, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(121, "00001000000000000001000000 001 0 0 100 000000000");
            uc.add(122, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(123, "//SUB [mem.], 5      ");
            uc.add(124, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(125, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(126, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(127, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(128, "00000000000000010001000000 001 0 0 100 000000000");
            uc.add(129, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(130, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(131, "//SUB [mem.], BX     ");
            uc.add(132, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(133, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(134, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(135, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(136, "00000000000000000001000000 001 0 0 100 000000000");
            uc.add(137, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(138, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(139, "//SUB [mem.],[mem.]  ");
            uc.add(140, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(141, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(142, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(143, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(144, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(145, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(146, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(147, "00001000000000000001000000 001 0 0 100 000000000");
            uc.add(148, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(149, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(150, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(151, "//SUB [mem.], [AX]   ");
            uc.add(152, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(153, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(154, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(155, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(156, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(157, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(158, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(159, "00001000000000000001000000 001 0 0 100 000000000");
            uc.add(160, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(161, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(162, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(163, "//SUB [AX], 5        ");
            uc.add(164, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(165, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(166, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(167, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(168, "00000000000000010001000000 001 0 0 100 000000000");
            uc.add(169, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(170, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(171, "//SUB [AX], BX       ");
            uc.add(172, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(173, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(174, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(175, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(176, "00000000000000000001000000 001 0 0 100 000000000");
            uc.add(177, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(178, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(179, "//SUB [AX], [mem.]   ");
            uc.add(180, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(181, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(182, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(183, "00001000000000000001000000 110 0 0 100 000000000");
            uc.add(184, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(185, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(186, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(187, "00001000000000000010000000 001 0 0 100 000000000");
            uc.add(188, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(189, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(190, "//SUB [AX], [BX]     ");
            uc.add(191, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(192, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(193, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(194, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(195, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(196, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(197, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(198, "00001000000000000001000000 001 0 0 100 000000000");
            uc.add(199, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(200, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(201, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(202, "//MUL 5              ");
            uc.add(203, "00000000000000000110000000 110 0 0 100 000000000");
            uc.add(204, "00000000010000000001000000 011 0 0 100 000000000");
            uc.add(205, "00000100000000000000100000 110 0 0 000 000000010");
            uc.add(206, "//MUL BX             ");
            uc.add(207, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(208, "00000000010000000001000000 011 0 0 100 000000000");
            uc.add(209, "00000100000000000000100000 110 0 0 000 000000010");
            uc.add(210, "//MUL [mem.]         ");
            uc.add(211, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(212, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(213, "00000000010000000010000101 110 0 0 100 000000000");
            uc.add(214, "00001000000000000001000000 011 0 0 100 000000000");
            uc.add(215, "00000100000000000000100000 110 0 0 000 000000010");
            uc.add(216, "//MUL [AX]           ");
            uc.add(217, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(218, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(219, "00000000010000000010000101 110 0 0 100 000000000");
            uc.add(220, "00001000000000000001000000 011 0 0 100 000000000");
            uc.add(221, "00000100000000000000100000 110 0 0 000 000000010");
            uc.add(222, "//DIV 5              ");
            uc.add(223, "00000000010000000010000000 110 0 0 100 000000000");
            uc.add(224, "00000000000000000101000000 010 0 0 100 000000000");
            uc.add(225, "00000100000000000000100000 111 0 0 100 000000000");
            uc.add(226, "00000000100000000000100000 110 0 0 000 000000010");
            uc.add(227, "//DIV BX             ");
            uc.add(228, "00000000010000000010000000 110 0 0 100 000000000");
            uc.add(229, "00000000000000000001000000 010 0 0 100 000000000");
            uc.add(230, "00000100000000000000100000 111 0 0 100 000000000");
            uc.add(231, "00000000100000000000100000 110 0 0 000 000000010");
            uc.add(232, "//DIV [mem.]         ");
            uc.add(233, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(234, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(235, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(236, "00000000010000000010000000 110 0 0 100 000000000");
            uc.add(237, "00001000000000000001000000 010 0 0 100 000000000");
            uc.add(238, "00000100000000000000100000 111 0 0 100 000000000");
            uc.add(239, "00000000100000000000100000 110 0 0 000 000000010");
            uc.add(240, "//DIV [AX]           ");
            uc.add(241, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(242, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(243, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(244, "00000000010000000010000000 110 0 0 100 000000000");
            uc.add(245, "00001000000000000001000000 010 0 0 100 000000000");
            uc.add(246, "00000100000000000000100000 111 0 0 100 000000000");
            uc.add(247, "00000000100000000000100000 110 0 0 000 000000010");
            uc.add(248, "//INC AX             ");
            uc.add(249, "00000000000000000001000000 100 0 0 100 000000000");
            uc.add(250, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(251, "//INC [mem.]         ");
            uc.add(252, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(253, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(254, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(255, "00001000000000000001000000 100 0 0 100 000000000");
            uc.add(256, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(257, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(258, "//INC [AX]           ");
            uc.add(259, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(260, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(261, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(262, "00001000000000000001000000 100 0 0 100 000000000");
            uc.add(263, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(264, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(265, "//DEC AX             ");
            uc.add(266, "00000000000000000001000000 101 0 0 100 000000000");
            uc.add(267, "00000000000000000000100000 110 0 0 000 000000010");
            uc.add(268, "//DEC [mem.]         ");
            uc.add(269, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(270, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(271, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(272, "00001000000000000001000000 101 0 0 100 000000000");
            uc.add(273, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(274, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(275, "//DEC [AX]           ");
            uc.add(276, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(277, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(278, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(279, "00001000000000000001000000 101 0 0 100 000000000");
            uc.add(280, "00010000000000000000110010 110 1 1 100 000000000");
            uc.add(281, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(282, "//CMP AX, 5          ");
            uc.add(283, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(284, "00000000000000010001000000 001 0 0 000 000000010");
            uc.add(285, "//CMP AX, BX         ");
            uc.add(286, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(287, "00000000000000000001000000 001 0 0 000 000000010");
            uc.add(288, "//CMP AX, [mem.]     ");
            uc.add(289, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(290, "00000000000000000010010010 110 1 0 100 000000000");
            uc.add(291, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(292, "00001000000000000001000000 001 0 0 000 000000010");
            uc.add(293, "//CMP AX, [BX]       ");
            uc.add(294, "00000000000000000010000000 110 0 0 100 000000000");
            uc.add(295, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(296, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(297, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(298, "00001000000000000001000000 001 0 0 100 000000000");
            uc.add(299, "//CMP [mem.], 5      ");
            uc.add(300, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(301, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(302, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(303, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(304, "00000000000000010001000000 001 0 0 000 000000010");
            uc.add(305, "//CMP [mem.], BX     ");
            uc.add(306, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(307, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(308, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(309, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(310, "00000000000000000001000000 001 0 0 000 000000010");
            uc.add(311, "//CMP [mem.],[mem.]  ");
            uc.add(312, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(313, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(314, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(315, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(316, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(317, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(318, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(319, "00001000000000000001000000 001 0 0 000 000000010");
            uc.add(320, "//CMP [mem.], [AX]   ");
            uc.add(321, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(322, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(323, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(324, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(325, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(326, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(327, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(328, "00001000000000000001000000 001 0 0 000 000000010");
            uc.add(329, "//CMP [AX], 5        ");
            uc.add(330, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(331, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(332, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(333, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(334, "00000000000000010001000000 001 0 0 000 000000010");
            uc.add(335, "//CMP [AX], BX       ");
            uc.add(336, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(337, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(338, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(339, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(340, "00000000000000000001000000 001 0 0 000 000000010");
            uc.add(341, "//CMP [AX], [mem.]   ");
            uc.add(342, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(343, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(344, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(345, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(346, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(347, "00000000000000000000010010 110 0 0 100 000000000");
            uc.add(348, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(349, "00001000000000000001000000 001 0 0 000 000000010");
            uc.add(350, "//CMP [AX], [BX]     ");
            uc.add(351, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(352, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(353, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(354, "00001000000000000010000000 110 0 0 100 000000000");
            uc.add(355, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(356, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(357, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(358, "00001000000000000001000000 001 0 0 000 000000010");
            uc.add(359, "//MOV AX, 5          ");
            uc.add(360, "00000000000000010000000000 110 0 0 000 000000010");
            uc.add(361, "//MOV AX, BX         ");
            uc.add(362, "00000000000000000000000000 110 0 0 000 000000010");
            uc.add(363, "//MOV AX, [mem.]     ");
            uc.add(364, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(365, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(366, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(367, "00001000000000000000000000 110 0 0 000 000000010");
            uc.add(368, "//MOV AX, [BX]       ");
            uc.add(369, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(370, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(371, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(372, "00001000000000000000000000 110 0 0 000 000000010");
            uc.add(373, "//MOV [mem.], 5      ");
            uc.add(374, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(375, "00010000000000010000010010 110 1 1 100 000000000");
            uc.add(376, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(377, "//MOV [mem.], BX     ");
            uc.add(378, "00100000000000000100000000 110 0 0 100 000000000");
            uc.add(379, "00010000000000000000010010 110 1 1 100 000000000");
            uc.add(380, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(381, "//MOV [mem.],[mem.]  ");
            uc.add(382, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(383, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(384, "00100000000000000100000101 110 0 0 100 000000000");
            uc.add(385, "00000000000000000000010010 110 1 1 100 000000000");
            uc.add(386, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(387, "//MOV [mem.], [AX]   ");
            uc.add(388, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(389, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(390, "00100000000000000100000101 110 0 0 100 000000000");
            uc.add(391, "00000000000000000000010010 110 1 1 100 000000000");
            uc.add(392, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(393, "//MOV [AX], 5        ");
            uc.add(394, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(395, "00010000000000010000010010 110 1 1 100 000000000");
            uc.add(396, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(397, "//MOV [AX], BX       ");
            uc.add(398, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(399, "00010000000000000000010010 110 1 1 100 000000000");
            uc.add(400, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(401, "//MOV [AX], [mem.]   ");
            uc.add(402, "00100000000000010000000000 110 0 0 100 000000000");
            uc.add(403, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(404, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(405, "00100000000000000000010010 110 1 1 100 000000000");
            uc.add(406, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(407, "//MOV [BX], [AX]     ");
            uc.add(408, "00100000000000000000000000 110 0 0 100 000000000");
            uc.add(409, "00000000000000000000010010 110 1 0 100 000000000");
            uc.add(410, "00000000000000000000000101 110 0 0 100 000000000");
            uc.add(411, "00100000000000000000010010 110 1 1 100 000000000");
            uc.add(412, "00000000000000000000001010 110 0 0 000 000000010");
            uc.add(413, "//JMP 5              ");
            uc.add(414, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(415, "//JZ 5               ");
            uc.add(416, "00000000000000000000000000 110 0 0 001 110100010");
            uc.add(417, "00000000000000000000000000 110 0 0 000 000000010");
            uc.add(418, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(419, "//JNZ 5              ");
            uc.add(420, "00000000000000000000000000 110 0 0 001 110100110");
            uc.add(421, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(422, "00000000000000000000000000 110 0 0 000 000000010");
            uc.add(423, "//JL 5               ");
            uc.add(424, "00000000000000000000000000 110 0 0 010 110101010");
            uc.add(425, "00000000000000000000000000 110 0 0 000 000000010");
            uc.add(426, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(427, "//JG 5               ");
            uc.add(428, "00000000000000000000000000 110 0 0 011 110101110");
            uc.add(429, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(430, "00000000000000000000000000 110 0 0 000 000000010");
            uc.add(431, "//JLE 5              ");
            uc.add(432, "00000000000000000000000000 110 0 0 011 110110010");
            uc.add(433, "00000000000000000000000000 110 0 0 000 000000010");
            uc.add(434, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(435, "//JGE 5              ");
            uc.add(436, "00000000000000000000000000 110 0 0 010 110110110");
            uc.add(437, "10000000000000000100000000 110 0 0 000 000000010");
            uc.add(438, "00000000000000000000000000 110 0 0 000 000000010");

            pin.put(0, "pc");
            pin.put(2, "mar");
            pin.put(3, "mbr");
            pin.put(5, "ax");
            pin.put(6, "bx");
            pin.put(7, "cx");
            pin.put(8, "dx");
            pin.put(18, "x");
            pin.put(19, "ula");
            pin.put(13, "ir");
            pin.put(14, "p2");
            pin.put(16, "p1");
            pin.put(23, "mbr");
            pin.put(24, "mem");

            pout.put(1, "pc");
            pout.put(4, "mbr");
            pout.put(9, "ax");
            pout.put(10, "bx");
            pout.put(11, "cx");
            pout.put(12, "dx");
            pout.put(20, "ac");
            pout.put(17, "p1");
            pout.put(15, "p2");
            pout.put(21, "mar");
            pout.put(22, "mbr");
            pout.put(25, "mem");
            fwok = true;
        }       
    }

}

class Memoria {

    public HashMap<Integer, String> memoria = new HashMap<>();
    public String buffer = null;
    public int bufferend;

    public void add(int indice, String palavra) {
        memoria.put(indice, palavra);
    }

    public String get(int indice) {
        return memoria.get(indice);
    }

    public void write(int end) {
        bufferend = end;
    }

    public void writeBuffer(String palavra) {
        memoria.put(bufferend, palavra);
    }

    public void read(int end) {
        buffer = memoria.get(end);
    }

    public String readBuffer() {
        return buffer;
    }
}

class Portas {

    String pentrada;
    String psaida;
    String pentradaext;
    String psaidaext;
    String ula;
    boolean pulo;
    String end;
    boolean av;
    String rw;

    Portas() {
        this.pentrada = "-1";
        this.psaida = "-1";
        this.pentradaext = "-1";
        this.psaidaext = "-1";
        this.ula = "-1";
        this.pulo = false;
        this.end = "-1";
        this.av = false;
        this.rw = "-1";
    }

    public void setpentrada(String pentrada) {
        this.pentrada = pentrada;
    }

    public void setpsaida(String psaida) {
        this.psaida = psaida;
    }

    public void setpentradaext(String pentradaext) {
        this.pentradaext = pentradaext;
    }

    public void setpsaidaext(String psaidaext) {
        this.psaidaext = psaidaext;
    }

    public void setula(String ula) {
        this.ula = ula;
    }

    public void setpulo(boolean pulo, String end) {
        this.pulo = pulo;
        this.end = end;
    }

    public void setadress(boolean av, String rw) {
        this.av = av;
        this.rw = rw;
    }

}
